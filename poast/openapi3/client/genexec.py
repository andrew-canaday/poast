"""
Dynamically generate OpenAPI 3.0 operation request wrappers.
"""
from .executor import RequestExecutor
from ..spec.document import OperationObject


def get_op_executor_cls(cls_name: str, op_id: str, verb: str, uri_path: str, op_item: OperationObject):
    """
    Given an OperationItemObject, return a class to wrap the prepared request
    generated by invoking the operation method.

    Args:
        cls_name (str): the name of the class to create
        op_id (str): the name of the API operation this method implements
        verb (str): the HTTP verb used by this operation
        uri_path (str): the API path for the operation
        op_item (poast.openapi3.spec.document.OperationObject): the operation object this method implements

    Todo:
        - Add link objects (https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#linkObject)
    """
    op_req_cls_name = op_id[0].upper() + op_id[1:] + 'Request'

    # Populate the namespace for the new class:
    cls_ns = {
        '__name__': op_req_cls_name,
        '__qualname__': f'{op_id}.{op_req_cls_name}',
        '__doc__': f'Wrapper for {op_id} prepared requests',
    }

    # Create and return the new class type:
    return type(op_req_cls_name, (RequestExecutor,), cls_ns)
